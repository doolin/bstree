require 'busted.runner'()

tree = require '../lib/tree'
node = require '../lib/node'

describe("instantiating trees", function()
  it("instantiates an empty tree", function()
    table = {
      key = nil,
      left = nil,
      right = nil
    }
    assert.are.same(table, tree:empty())
  end)

  it("creates a tree with a root node", function()
    root = node:new(11)
    local t = tree:new(root)
    assert.are.same(root, t.root)
  end)
end)

describe("build_from_yaml", function()
  it("builds a single node tree", function()
    local tree = build_from_yaml("../fixtures/tree1.yml")

    assert.are.same(tree.root.key, 11)
    assert.are.same(1, tree:size())
    assert.are.same(0, tree:height())
    assert.are.same(true, tree:is_bst())
    -- assert.are.same(true, tree:is_full())
    -- assert.are.same(true, tree:is_balanced())
    -- assert.are.same({11}, tree:postorder_keys())
    -- assert.are.same({11}, tree:preorder_keys())
    -- assert.are.same(true, tree:is_pathological())
  end)

  it("builds a two node tree", function()
    local tree = build_from_yaml("../fixtures/tree2.yml")

    assert.are.same(tree.root.key, 11)
    assert.are.same(2, tree:size())
    assert.are.same(1, tree:height())
    assert.are.same(true, tree:is_bst())
    -- assert.are.same(true, tree:is_full())
    -- assert.are.same(true, tree:is_balanced())
    -- assert.are.same({7, 11}, tree:postorder_keys())
    -- assert.are.same({11, 7}, tree:preorder_keys())
    -- assert.are.same(true, tree:is_pathological())
  end)

  it("builds a three node tree", function()
    local tree = build_from_yaml("../fixtures/tree3.yml")

    assert.are.same(tree.root.key, 11)
    assert.are.same(3, tree:size())
    assert.are.same(1, tree:height())
    assert.are.same(true, tree:is_bst())
    -- assert.are.same(true, tree:is_full())
    -- assert.are.same(true, tree:is_balanced())
    -- assert.are.same({7, 13, 11}, tree:postorder_keys())
    -- assert.are.same({11, 7, 13}, tree:preorder_keys())
    -- assert.are.same(true, tree:is_pathological())
  end)

  it("builds a four node tree", function()
    local tree = build_from_yaml("../fixtures/tree4.yml")

    assert.are.same(tree.root.key, 11)
    assert.are.same(4, tree:size())
    assert.are.same(2, tree:height())
    assert.are.same(true, tree:is_bst())
    -- assert.are.same(false, tree:is_full())
    -- assert.are.same(true, tree:is_balanced())
    -- assert.are.same({3, 7, 13, 11}, tree:postorder_keys())
    -- assert.are.same({11, 7, 3, 13}, tree:preorder_keys())
    -- assert.are.same(true, tree:is_pathological())
  end)

  it("builds a five node tree", function()
    local tree = build_from_yaml("../fixtures/tree5.yml")

    assert.are.same(tree.root.key, 11)
    assert.are.same(5, tree:size())
    assert.are.same(2, tree:height())
    assert.are.same(true, tree:is_bst())
    -- assert.are.same(false, tree:is_full())
    -- assert.are.same(true, tree:is_balanced())
    -- assert.are.same({3, 7, 19, 13, 11}, tree:postorder_keys())
    -- assert.are.same({11, 7, 3, 13, 19}, tree:preorder_keys())
    -- assert.are.same(true, tree:is_pathological())
  end)

  it("builds a six node tree", function()
    local tree = build_from_yaml("../fixtures/tree6.yml")

    assert.are.same(tree.root.key, 11)
    assert.are.same(6, tree:size())
    assert.are.same(3, tree:height())
    assert.are.same(true, tree:is_bst())
    -- assert.are.same(false, tree:is_full())
    -- assert.are.same(false, tree:is_balanced())
    -- assert.are.same({3, 7, 29, 19, 13, 11}, tree:postorder_keys())
    -- assert.are.same({11, 7, 3, 13, 19, 29}, tree:preorder_keys())
    -- assert.are.same(true, tree:is_pathological())
  end)

  it("builds a seven node tree", function()
    local tree = build_from_yaml("../fixtures/tree7.yml")

    assert.are.same(tree.root.key, 11)
    assert.are.same(7, tree:size())
    assert.are.same(3, tree:height())
    assert.are.same(true, tree:is_bst())
    -- assert.are.same(false, tree:is_full())
    -- assert.are.same(false, tree:is_balanced())
    -- assert.are.same({5, 3, 7, 29, 19, 13, 11}, tree:postorder_keys())
    -- assert.are.same({11, 7, 3, 5, 13, 19, 29}, tree:preorder_keys())
    -- assert.are.same(true, tree:is_pathological())
  end)

  it("builds a eight node tree", function()
    local tree = build_from_yaml("../fixtures/tree8.yml")

    assert.are.same(tree.root.key, 11)
    assert.are.same(8, tree:size())
    assert.are.same(3, tree:height())
    assert.are.same(true, tree:is_bst())
    -- assert.are.same(false, tree:is_full())
    -- assert.are.same(false, tree:is_balanced())
    -- assert.are.same({2, 5, 3, 7, 29, 19, 13, 11}, tree:postorder_keys())
    -- assert.are.same({11, 7, 3, 2, 5, 13, 19, 29}, tree:preorder_keys())
    -- assert.are.same(true, tree:is_pathological())
  end)

  it("builds a nine node tree", function()
    local tree = build_from_yaml("../fixtures/tree9.yml")

    assert.are.same(tree.root.key, 11)
    assert.are.same(9, tree:size())
    assert.are.same(3, tree:height())
    assert.are.same(true, tree:is_bst())
    -- assert.are.same(false, tree:is_full())
    -- assert.are.same(false, tree:is_balanced())
    -- assert.are.same({2, 5, 3, 7, 17, 29, 19, 13, 11}, tree:postorder_keys())
    -- assert.are.same({11, 7, 3, 2, 5, 13, 19, 17, 29, 23}, tree:preorder_keys())
    -- assert.are.same(true, tree:is_pathological())
  end)

  it("builds a ten node tree", function()
    local tree = build_from_yaml("../fixtures/tree10.yml")

    assert.are.same(tree.root.key, 11)
    assert.are.same(10, tree:size())
    assert.are.same(4, tree:height())
    assert.are.same(true, tree:is_bst())
    -- assert.are.same(false, tree:is_full())
    -- assert.are.same(false, tree:is_balanced())
    -- assert.are.same({2, 5, 3, 7, 17, 23, 29, 19, 13, 11}, tree:postorder_keys())
    -- assert.are.same({11, 7, 3, 2, 5, 13, 19, 17, 29}, tree:preorder_keys())
    -- assert.are.same(true, tree:is_pathological())
  end)
end)


describe("is_empty", function()
  it("is empty when root is nill", function()
    root = node:new(17)
    tree = tree:new(root)
    tree.root = nil
    assert.are.same(tree:is_empty(), true)
  end)
end)

describe("transplant", function()
  it("transplants nil into root", function()
    root = node:new(17)
    tree = tree:new(root)
    tree:transplant(root, nil)
    assert.are.same(tree:is_empty(), true)
  end)

  it("transplants left child into root", function()
    root = node:new(17)
    tree = tree:new(root)
    n5 = node:new(5)
    tree:insert(n5)
    assert.are.same(n5.parent, tree.root)
    tree:transplant(root, n5)
    assert.are.same(tree.root, n5)
    assert.are.same(n5.parent, nil)
  end)

  it("transplants grandchild into left child", function()
    root = node:new(17)
    tree = tree:new(root)
    n5 = node:new(5)
    n7 = node:new(7)
    tree:insert(n5)
    tree:insert(n7)
    assert.are.same(n7.parent, n5)
    tree:transplant(n5, n7)
    assert.are.same(tree.root.left, n7)
    assert.are.same(n7.parent, tree.root)
  end)

  it("transplants right child into root", function()
    root = node:new(17)
    tree = tree:new(root)
    n23 = node:new(23)
    tree:insert(n23)
    assert.are.same(n23.parent, tree.root)
    tree:transplant(root, n23)
    assert.are.same(tree.root, n23)
    assert.are.same(n23.parent, nil)
  end)

  it("transplants grandchild into right child", function()
    root = node:new(17)
    tree = tree:new(root)
    n23 = node:new(23)
    n29 = node:new(29)
    tree:insert(n23)
    tree:insert(n29)
    assert.are.same(n29.parent, n23)
    tree:transplant(n23, n29)
    assert.are.same(tree.root.right, n29)
    assert.are.same(n29.parent, tree.root)
  end)
end)

describe(":delete_node", function()
  it("deletes nodes from a tree", function()
    local root = node:new(17)
    local tree = tree:new(root)
    n2 = node:new(2)
    n3 = node:new(3)
    n5 = node:new(5)
    n7 = node:new(7)
    n11 = node:new(11)
    n13 = node:new(13)
    n19 = node:new(19)
    n23 = node:new(23)
    n29 = node:new(29)

    tree:insert(n5)
    tree:insert(n3)
    tree:insert(n2)
    tree:insert(n7)
    tree:insert(n11)
    tree:insert(n13)
    tree:insert(n23)
    tree:insert(n19)
    tree:insert(n29)

    -- only right child
    deleted = tree:delete_node(11)
    assert.are.same(deleted, n11)
    assert.are.same(tree:size(), 9)
    assert.are.same(n7.right, n13)
    assert.are.same(n13.parent, n7)

    -- only left child
    deleted = tree:delete_node(3)
    assert.are.same(deleted, n3)
    assert.are.same(tree:size(), 8)
    assert.are.same(n3:is_unlinked(), true)
    assert.are.same(n5.left, n2)
    assert.are.same(n2.parent, n5)

    -- two children, right node is successor
    deleted = tree:delete_node(5)
    assert.are.same(deleted, n5)
    assert.are.same(tree:size(), 7)
    assert.are.same(tree.root.left, n7)
    assert.are.same(n7.parent, tree.root)
    assert.are.same(n7.left, n2)
    assert.are.same(n2.parent, n7)

    -- two children, right node is not successor
    deleted = tree:delete_node(17)
    assert.are.same(deleted, root)
    assert.are.same(root:is_unlinked(), true)
    assert.are.same(tree.root, n19)
    assert.are.same(n19.right, n23)
    assert.are.same(n23.parent, n19)
    assert.are.same(n19.left, n7)
    assert.are.same(n7.parent, n19)
    assert.are.same(tree:size(), 6)

    tree:delete_node(2)
    tree:delete_node(13)
    tree:delete_node(7)
    tree:delete_node(23)
    tree:delete_node(19)
    assert.are.same(tree.root, n29)
    assert.are.same(tree:size(), 1)
    assert.are.same(n29:is_unlinked(), true)

    tree:delete_node(29)
    assert.are.same(tree:size(), 0)
    assert.are.same(tree:is_empty(), true)
  end)
end)

describe("insert nodes into tree", function()
  setup(function()
    local root = node:new(11)
    t = tree:new(root)
  end)

  it("it inserts a right node into a rooted tree", function()
    local n17 = node:new(17)
    t:insert(n17)
    assert.are.same(n17, t.root.right)
  end)

  it("it inserts a right node into a rooted tree", function()
    local n5 = node:new(5)
    t:insert(n5)
    assert.are.same(n5, t.root.left)
  end)

  it("it inserts a right then a left node into a rooted tree", function()
    local n13 = node:new(13)
    t:insert(n13)
    assert.are.same(n13, t.root.right.left)
  end)

  it("it inserts a left then a right node into a rooted tree", function()
    local n7 = node:new(7)
    t:insert(n7)
    assert.are.same(n7, t.root.left.right)
  end)
end)

describe('find maximum or minimum', function()
  setup(function()
    root = node:new(13)
    t = tree:new(root)
    n19 = node:new(19)
  end)

  it('returns nil for maximum and minimum of empty tree', function()
    local t = tree:new(nil)
    assert.are.same(nil, t:maximum())
    assert.are.same(nil, t:minimum())
  end)

  it('finds maximum and minimum same in single node tree', function()
    assert.are.same(root, t:maximum())
    assert.are.same(root, t:minimum())
  end)

  it('finds minimum left child and maximum right child', function()
    local n7 = node:new(7)
    t:insert(n7)
    t:insert(n19)
    assert.are.same(n7, t:minimum())
    assert.are.same(n19, t:maximum())
  end)

  it("finds the value from root and right child", function()
    local n17 = node:new(17)
    local n3 = node:new(3)
    local n5 = node:new(5)
    t:insert(n17)
    t:insert(n3)
    t:insert(n5)

    assert.are.same(n3, t:minimum())
    assert.are.same(n19, t:maximum())
  end)
end)

describe("searches tree for node with specified key", function()
  setup(function()
    local root = node:new(11)
    t = tree:new(root)
  end)

  it("returns nil for an empty tree", function()
    local t = tree:new(nil)
    assert.are.same(nil, t:search(42))
    assert.are.same(false, t:is_present(42))
  end)

  it("finds the value from a single node", function()
    assert.are.same(t.root, t:search(11))
    assert.are.same(true, t:is_present(11))
  end)

  it("finds the value from root and right child", function()
    local n17 = node:new(17)
    t:insert(n17)
    assert.are.same(n17, t:search(17))
    assert.are.same(true, t:is_present(17))

    local n7 = node:new(7)
    t:insert(n7)
    assert.are.same(n7, t:search(7))
    assert.are.same(true, t:is_present(7))

    local n3 = node:new(3)
    t:insert(n3)
    local n5 = node:new(5)
    t:insert(n5)
    local n19 = node:new(19)
    t:insert(n19)
    assert.are.same(n3, t:search(3))
    assert.are.same(true, t:is_present(3))
    assert.are.same(n5, t:search(5))
    assert.are.same(true, t:is_present(5))
    assert.are.same(n19, t:search(19))
    assert.are.same(true, t:is_present(19))
    assert.are.same(nil, t:search(42))
  end)
end)

describe("collects values in key order", function()
  setup(function()
    local root = node:new(11)
    t = tree:new(root)
  end)

  it("returns nil for an empty tree", function()
    local t = tree:new(nil)
    actual = {}
    t:collect({})
    assert.are.same({}, actual)
  end)

  it("collects the value from a single node", function()
    actual = {}
    t:collect(actual)
    expected = {11}
    assert.are.same(expected, actual)
  end)

  it("collects the value from root and right child", function()
    local n17 = node:new(17)
    t:insert(n17)

    actual = {}
    t:collect(actual)
    expected = {11, 17}
    assert.are.same(expected, actual)
  end)

  it("collects the value from root and right and left child", function()
    local n7 = node:new(7)
    t:insert(n7)

    actual = {}
    t:collect(actual)
    expected = {7, 11, 17}
    assert.are.same(expected, actual)
  end)

  it("return in order list of tree with height 3", function()
    local n3 = node:new(3)
    t:insert(n3)
    local n5 = node:new(5)
    t:insert(n5)
    local n19 = node:new(19)
    t:insert(n19)

    actual = {}
    t:collect(actual)
    expected = {3, 5, 7, 11, 17, 19}
    assert.are.same(expected, actual)
  end)
end)

describe(":list_keys", function()
  it("returns {} for empty tree", function()
    t = tree:new()
    assert.are.same({}, t:list_keys())
  end)

  it("lists the key for a treew with a root node", function()
    root = node:new(17)
    t = tree:new(root)
    -- t:insert(r) -- DON'T DO THIS! Not handling duplicate keys yet.
    expected = {17}
    assert.are.same(expected, t:list_keys())
  end)
end)

describe("deletes a node from the tree", function()
  pending("deletes root when 1 node tree")
end)

describe(":successor", function()
  it("finds root successor for single node", function()
    local root = node:new(17)
    local t = tree:new(root)
    assert.are.same(root, t:successor(root))
  end)
end)

describe (":predecessor", function()
  it("finds root predecessor for single node", function()
    local root = node:new(17)
    local t = tree:new(root)
    assert.are.same(root, t:predecessor(root))
  end)
end)

describe(":is_bst", function()
  it("finds that a single node is a BST", function()
    local root = node:new(17)
    local t = tree:new(root)
    assert.are.same(true, t:is_bst())
  end)
end)

describe(":height", function()
  setup(function()
    local root = node:new(11)
    t = tree:new(root)
  end)

  it("tree with 1 node has height 0", function()
    assert.are.same(0, t:height())
  end)

  it("tree with two nodes has height 1", function()
    local n3 = node:new(3)
    t:insert(n3)
    assert.are.same(1, t:height())
  end)
end)

describe(":size", function()
  it("tree with 1 node is size 1", function()
    local root = node:new(11)
    local t = tree:new(root)
    assert.are.same(1, t:size())
  end)
end)
